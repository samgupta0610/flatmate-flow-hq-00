
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Enhanced task translations for the edge function
const taskTranslations: { [key: string]: { [lang: string]: string } } = {
  'clean kitchen': {
    hindi: '‡§∞‡§∏‡•ã‡§à ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç',
    tamil: '‡Æö‡ÆÆ‡Øà‡ÆØ‡Æ≤‡Æ±‡Øà‡ÆØ‡Øà ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
    telugu: '‡∞µ‡∞Ç‡∞ü‡∞ó‡∞¶‡∞ø‡∞®‡∞ø ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
    kannada: '‡≤Ö‡≤°‡≥Å‡≤ó‡≥Ü‡≤Æ‡≤®‡≥Ü ‡≤∏‡≥ç‡≤µ‡≤ö‡≥ç‡≤õ‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø'
  },
  'wash dishes': {
    hindi: '‡§¨‡§∞‡•ç‡§§‡§® ‡§ß‡•ã‡§è‡§Ç',
    tamil: '‡Æ™‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æ¥‡ØÅ‡Æµ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
    telugu: '‡∞™‡∞æ‡∞§‡±ç‡∞∞‡∞≤‡∞®‡±Å ‡∞ï‡∞°‡±Å‡∞ï‡±ç‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
    kannada: '‡≤™‡≤æ‡≤§‡≥ç‡≤∞‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥ä‡≤≥‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø'
  },
  'clean bathroom': {
    hindi: '‡§∏‡•ç‡§®‡§æ‡§®‡§ò‡§∞ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç',
    tamil: '‡Æï‡ØÅ‡Æ≥‡Æø‡ÆØ‡Æ≤‡Æ±‡Øà‡ÆØ‡Øà ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
    telugu: '‡∞∏‡ßç‡¶®‡¶æ‡¶®‡¶ó‡¶¶‡¶ø‡∞®‡∞ø ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
    kannada: '‡≤∏‡≥ç‡≤®‡≤æ‡≤®‡≤ó‡≥É‡≤π ‡≤∏‡≥ç‡≤µ‡≤ö‡≥ç‡≤õ‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø'
  },
  'sweep floor': {
    hindi: '‡§´‡§∞‡•ç‡§∂ ‡§ù‡§æ‡§°‡§º‡•á‡§Ç',
    tamil: '‡Æ§‡Æ∞‡Øà‡ÆØ‡Øà ‡Æ§‡ØÅ‡Æü‡Øà‡Æï‡Øç‡Æï‡§µ‡ØÅ‡ÆÆ‡Øç',
    telugu: '‡∞®‡±á‡∞≤‡∞®‡±Å ‡∞ä‡∞°‡±ç‡∞ö‡∞Ç‡∞°‡§ø',
    kannada: '‡≤®‡≥Ü‡≤≤ ‡≤ó‡≥Å‡≤°‡≤ø‡≤∏‡≤ø'
  },
  'mop floor': {
    hindi: '‡§´‡Æ∞‡•ç‡§∂ ‡§™‡•ã‡§Ç‡§õ‡•á‡§Ç',
    tamil: '‡Æ§‡Æ∞‡Øà‡ÆØ‡Øà ‡Æ§‡ØÅ‡Æü‡Øà‡Æï‡•ç‡Æï‡§µ‡•Ç‡§Æ‡•ç',
    telugu: '‡∞®‡±á‡∞≤‡∞®‡±Å ‡∞§‡±Å‡∞°‡±Å‡∞ö‡±Å‡∞ü',
    kannada: '‡≤®‡≥Ü‡≤≤ ‡≤í‡≤∞‡≥Ü‡≤∏‡≤ø'
  }
};

const getTranslatedTask = (taskTitle: string, language: string): string => {
  const normalizedTitle = taskTitle.toLowerCase().trim();
  const translation = taskTranslations[normalizedTitle];
  
  if (!translation || language === 'english') {
    return taskTitle;
  }
  
  return translation[language] || taskTitle;
};

const getTaskEmoji = (taskTitle: string): string => {
  const title = taskTitle.toLowerCase().trim();
  const emojiMap: { [key: string]: string } = {
    'clean kitchen': 'üçΩÔ∏è',
    'wash dishes': 'üç¥',
    'clean bathroom': 'üöø',
    'clean toilet': 'üöΩ',
    'sweep floor': 'üßπ',
    'mop floor': 'üßΩ',
    'wash clothes': 'üëï',
    'iron clothes': 'üëî',
    'make bed': 'üõèÔ∏è',
    'vacuum': 'üåÄ',
    'dusting': 'ü™∂'
  };
  
  return emojiMap[title] || 'üìù';
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    console.log('Starting auto-send task execution...');

    // Get all contacts that need auto-sending
    const { data: contacts, error: contactsError } = await supabase
      .from('maid_contacts')
      .select('*')
      .eq('auto_send', true);

    if (contactsError) {
      console.error('Error fetching contacts:', contactsError);
      throw contactsError;
    }

    console.log(`Found ${contacts?.length || 0} contacts with auto-send enabled`);

    for (const contact of contacts || []) {
      console.log(`Processing contact: ${contact.id} - ${contact.name}`);
      
      // Check if we should send for this contact
      const { data: shouldSend, error: shouldSendError } = await supabase
        .rpc('should_send_auto_reminder', {
          contact_auto_send: contact.auto_send,
          contact_send_time: contact.send_time,
          contact_frequency: contact.frequency,
          contact_days_of_week: contact.days_of_week,
          contact_last_sent_at: contact.last_sent_at
        });

      if (shouldSendError) {
        console.error('Error checking send condition:', shouldSendError);
        continue;
      }

      if (!shouldSend) {
        console.log(`Skipping contact ${contact.id} - not time to send`);
        continue;
      }

      // Get user's selected tasks
      const { data: tasks, error: tasksError } = await supabase
        .from('maid_tasks')
        .select('*')
        .eq('user_id', contact.user_id)
        .eq('selected', true)
        .eq('completed', false);

      if (tasksError) {
        console.error('Error fetching tasks:', tasksError);
        continue;
      }

      if (!tasks || tasks.length === 0) {
        console.log(`No tasks found for user ${contact.user_id}`);
        continue;
      }

      // Get user's preferred language (default to Hindi for now)
      const preferredLanguage = 'hindi'; // This could be retrieved from user preferences in the future

      // Generate translated message
      const greeting = preferredLanguage === 'hindi' 
        ? '‡§®‡§Æ‡§∏‡•ç‡§§‡•á!' 
        : preferredLanguage === 'tamil' 
        ? '‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç!' 
        : preferredLanguage === 'telugu'
        ? '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç!'
        : preferredLanguage === 'kannada'
        ? '‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞!'
        : 'Hello!';
      
      const taskListHeader = preferredLanguage === 'hindi' 
        ? '‡§Ü‡§ú ‡§ï‡•á ‡§ï‡§æ‡§Æ:' 
        : preferredLanguage === 'tamil' 
        ? '‡Æá‡Æ©‡Øç‡Æ±‡Øà‡ÆØ ‡Æ™‡Æ£‡Æø‡Æï‡Æ≥‡Øç:' 
        : preferredLanguage === 'telugu'
        ? '‡∞®‡±á‡∞ü‡∞ø ‡∞™‡∞®‡±Å‡∞≤‡±Å:'
        : preferredLanguage === 'kannada'
        ? '‡≤á‡≤Ç‡≤¶‡≤ø‡≤® ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤≥‡≥Å:'
        : "Today's cleaning tasks:";
      
      const thankYou = preferredLanguage === 'hindi' 
        ? '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ø‡•á ‡§ï‡§æ‡§Æ ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!' 
        : preferredLanguage === 'tamil' 
        ? '‡Æá‡Æ®‡Øç‡Æ§ ‡Æ™‡Æ£‡Æø‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡Æ©‡Øç‡Æ±‡Æø!' 
        : preferredLanguage === 'telugu'
        ? '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞à ‡∞™‡∞®‡±Å‡∞≤‡∞®‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å!'
        : preferredLanguage === 'kannada'
        ? '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤à ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø. ‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å!'
        : 'Please complete these tasks. Thank you!';

      let message = `${greeting}\n\n${taskListHeader}\n`;
      
      tasks.forEach((task, index) => {
        const translatedTask = getTranslatedTask(task.title, preferredLanguage);
        const emoji = getTaskEmoji(task.title);
        
        message += `${index + 1}. ${emoji} ${translatedTask}`;
        if (task.remarks) {
          message += ` (${task.remarks})`;
        }
        message += '\n';
      });

      const totalTasksText = preferredLanguage === 'hindi' 
        ? '‡§ï‡•Å‡§≤ ‡§ï‡§æ‡§Æ:' 
        : preferredLanguage === 'tamil' 
        ? '‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æ™‡Æ£‡Æø‡Æï‡Æ≥‡Øç:' 
        : preferredLanguage === 'telugu'
        ? '‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞™‡∞®‡±Å‡∞≤‡±Å:'
        : preferredLanguage === 'kannada'
        ? '‡≤í‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤≥‡≥Å:'
        : 'Total tasks:';

      message += `\n${totalTasksText} ${tasks.length}\n\n${thankYou}`;

      console.log(`Generated message for ${contact.name}:`, message);

      // Log the auto-send attempt
      const { error: historyError } = await supabase
        .from('auto_send_history')
        .insert({
          user_id: contact.user_id,
          contact_id: contact.id,
          status: 'sent',
          sent_at: new Date().toISOString()
        });

      if (historyError) {
        console.error('Error logging history:', historyError);
      }

      // Update last_sent_at
      const { error: updateError } = await supabase
        .from('maid_contacts')
        .update({ last_sent_at: new Date().toISOString() })
        .eq('id', contact.id);

      if (updateError) {
        console.error('Error updating last_sent_at:', updateError);
      }

      console.log(`Successfully processed auto-send for contact ${contact.id} - ${contact.name}`);
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `Processed ${contacts?.length || 0} contacts`,
        processedContacts: contacts?.length || 0
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )

  } catch (error) {
    console.error('Auto-send function error:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})
